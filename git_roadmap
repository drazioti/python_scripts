Initial author : K.A.Draziotis

=== Simple Github tutorial v.1.0 ===


-- Basic Definitions --

Repository : a database that contain information to manage the history
 of a project. There two structures of a git repository. 
1. Index : which is a binary file and
2. obejct store :  which is a directory. The object store  contains 
four objects : Blobs, trees, commits, tags.

Blobs : each version of a file is represented as a blob. Blobs are only
referenced by the trees and references nothing. I.e blobs are at the bottom
of the data stracture in a git repo. 
Trees : contain some metadata as blob identifier,
pathnames etc. In this way an hierarchy of files and subdirectories is built.
Trees, point to other trees or to blobs.
Commits : ia an object that holds metadata for each change into a repository. 
It holds the author name, commit date, log message and others.
Tag : this is the hash of an object, usually a commit. Tags point to
commit(s).

Index : is a binary file that describes the structure of the repository.

-- Git commands --

$git help or $git help --all|less
$git --version
$git help "command" for instance $git help add

If you want all the commits (not only for the specific directory) to use 
a specific name and email then you have to use the following command:
$git config --global user.name "John"
$git config --global user.mail "a@a.com"
To list the settings of all variables give:
$git congig -l

Since the configuration fields are text files,
If you want to delete or edit something, give
$sudo nano ~/.gitconfig
or:
$git config --local user.name "John"
$git config --local user.email "a@a.com"

Say you want to commit a file foo.txt then do:

$git add .
$git commit -m "something"
$git push

and the file will be transfered to the remote repo.

The command $git add .
updates the object store and indexed by sha1. 
The files are now stagged. Since you have to apply "git add ." the sha1's will be 
computed again. Giving now 
$git diff --cached
you will get the differences of the files you changed relatively to the previous version (of the same file).
When you apply 
$git commit
then, the file becomes a part of the working directory and your are now one commit  ahead from the remote repo.
To update the remote repo 
$git push
If you don't give $git push and instead give
$chekout filename
then, all the changes will be lost.

In case you want to create and checkout to a new branch then

$git checkout -b foo

and to push it in the remote repo

$git push origin foo

Now you have two branches : master and foo

Say that you've made a change on a specific file while you were
in the branch foo. Now, if you want to add the changes of the file to the
master branch you have to do 
$git checkout master  
$git merge foo

=== Syncing your local fork with the main repo ===

First configure a remote for your fork:

$git remote add upstream https://github.com/ORIGINAL_OWNER.git
$git remote -v

Then sync your fork with the upstream:

$git checkout master
$git fetch upstream
$git merge upstream/master

so now you have:

origin	https://github.com/drazioti/repo_name.git (fetch)
origin	https://github.com/drazioti/repo_name.git (push)
upstream	https://github.com/ORIGINAL_OWNER/repo_name.git (fetch)
upstream	https://github.com/ORIGINAL_OWNER/repo_name.git (push)

To sync with you github repo give add/commit/push

to delete the upstream

$git remote rm upstream

=== Develpoment, using a branch ===
Create a new local branch say "mybranch" to your fork.

$git checkout -b mybranch

Then add/make the changes you want.
Push the branch to your (remote) fork

$git add .
$git commit -m "sthm"
$git push --set-upstream origin mybranch
$git checkout master
$git add .
$git commit -m "."
$git push

If while editing files in your branch 'mybranch'
another user changed something in the remote master branch 
do the following.

$git checkout master
$git fetch upstream
$git merge upstream/master
$git checkout mybranch
$git rebase origin/master
$nano [conflict file]
solve conflicts by removing <,=,> markers
$git rebase continue

=== If you want to delete a remote branch

$git push <remote_name> --delete <branch_name>
Usually <remote_name> is origin

=== If by a mistake you made $git pull === 

Say you want to go back to the previous state, give
$git revert HEAD #this will not rewrite history

If you want to go back to a specific commit both the local and the remote repo (origin)
then,

$git reset --hard db2b8f5       # this will rewrite history
$git push -f origin master      # this will sync the remote repo (origin master) with your local (master) i.e.
				# the remote repo will go back to the previous commit with fingerprint : db2b8f5 

=== if after pull request you get, error: Your local changes to the following files would be overwritten by merge:..

$git stash save --keep-index

This will remove all local changes from your working copy

=== If you want to change the commit message of a previous commit ===

see https://help.github.com/en/github/committing-changes-to-your-project/changing-a-commit-message

=== Review a Pull request of the upstream repository ===

$git status

If you do not have any collisions, then
say you want to review the pull request
[WIP] bug fixing #46

$git fetch upstream pull/46/head:bug
$git checkout bug

=== Review a Pull request from the origin ===
the same, but
$git fetch origin pull/46/head:bug
and you can review the bug.
