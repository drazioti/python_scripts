We provide a comparison between exhaustive search and our attack-2.
With exhaustive search we mean the following attack :

   == Pseudocode of exhaustive search ==
Input  : c,H
 Output : m
============
01. for msg in [all messages with hamming weight H]:
02.   if encrypt(msg)==c:
03.        return msg

and the actual python code is :
=================================================
def naive(n,hamming,c):
    import itertools
    
    def bin2int(a):
        return int("".join(str(x) for x in a),2)

    start = time.time()
    for bits in itertools.combinations(range(n+1), hamming):
        s = ['0'] * (n+1)
        if bits[0]==0:
            for bit in bits:
                s[bit] = '1'
            msg = bin2int(str(''.join(s)))
            #print msg,''.join(s)
            if X.encrypt(msg,p,u) == c:
                print msg #, str(''.join(s))
                end = time.time()-start
                print end
                return


########################################################
#create a random message of n-bit and H_m=hamming weight
########################################################
import random
import numpy as np
def message(H_m,n):
    k=random.sample(range(0, n), H_m-1)
    k.append(n)
    k.sort(reverse=True)
    print k  
    m=0
    for i in range(0,H_m):
        m=2^k[i]+m
    return m

#############################################################################################
#######(average time of our attack/average time of exhaustive for the same message #######
#############################################################################################

import time
X = ns()  						# Create an instance of the class ns() 
p,q,n,u,s = X.choose_pk_sk(600) # we choose the public and secret key with prime p 1024 bits
n=84
hamming=5
bound = n/2
flag = 2
Time_attack_2=0
Time_ex_search=0
times=50 						# the number of random messages to consider
for i in range(times):
    m=message(hamming,n)
    c = X.encrypt(m,p,u)
    a=time.time()
    naive(n,hamming,c)
    Time_ex_search=Time_ex_search+time.time()-a
    I1=[];I2=[];U1=[];U2=[]
    reset('U1','U2')
    start = time.time()
    R = []
    L = []
    r = 1
    msg = None
    while msg==None:
        print "round:",r
        R.append(r)
        I1,I2,U1,U2 = X.gen(n,bound,flag)
        msg = X.attack(n,bound,p,c,hamming,s,flag,I1,I2,U1,U2)       
        if msg!=None:
            print msg==m    
            Time_attack_2=Time_attack_2+time.time()-start
        r = r + 1
average_time= RR((Time_attack_2)/(Time_ex_search))
print "average time:", average_time,"on",times,  "random messages, for n=", n ,"and Hamming weight=",hamming


===================================================
results

n =  84 Η =  4 Time-attack_2/Time_ex_search= 0.0542539972052124
n =  84 Η =  5 Time-attack_2/Time_ex_search= 0.0114641233569999
n =  84 Η =  6 Time-attack_2/Time_ex_search= 0.00360000000000000

=================================================
